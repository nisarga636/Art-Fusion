generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model account {
  id                String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              user    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model session {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model user {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email              String?              @unique
  emailVerified      DateTime?     
  image              String?
  name               String
  isNewUser          Boolean              @default(true)
  date_of_birth      String?
  password           String?
  phone_no           String?
  age                Int?
  address            String?
  physical_details   String?
  expected_payment   Boolean?
  skill              String?
  id_proof           String?
  role_type          roles?               @default(UNRECONGNIZED)
  account            account[]
  session            session[]
  productionProfiles productionProfiles[]

  @@index([id])
}

enum roles {
  ARTIST
  PROD_OWNER
  UNRECONGNIZED
}

model prev_projects {
  id              String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  project_name    String
  production_name String
  link            String
  technician_role String
  released_date   String
}

model productionProfiles {
  id                  String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title               String
  address             String
  no_of_shooting_days Int
  created_at          DateTime        @default(dbgenerated("now()"))
  updated_at          DateTime        @updatedAt
  release_date        DateTime
  payment_provided    Boolean
  restrictions        String
  poster              String
  budget              Int
  duration            Int
  gener_on_prod       gener_on_prod[]
  artists             user?           @relation(fields: [artistsId], references: [id])
  artistsId           String?         @db.Uuid
}

model gener_on_prod {
  id                String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  prod_id           String             @db.Uuid
  genere            String
  productionProfile productionProfiles @relation(fields: [prod_id], references: [id])
  genere_category   genere_category    @relation(fields: [genere], references: [genere_type])
}

model genere_category {
  genere_type   String          @id
  gener_on_prod gener_on_prod[]
}
